import os
import logging
import requests
import openai
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
VK_TOKEN = os.getenv("VK_GROUP_TOKEN")
VK_GROUP_ID = -229574072  # ID –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL") + WEBHOOK_PATH
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

app = FastAPI()
application: Application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –±–µ–∑ update –æ–±—ä–µ–∫—Ç–∞")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application.add_error_handler(error_handler)

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["‚úç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Etronics üöÄ\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n/help ‚Äî –ø–æ–º–æ—â—å\n/generate ‚Äî –∞–≤—Ç–æ-–ø–æ—Å—Ç\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è"
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = "–∏–≥—Ä–æ–≤–æ–π –Ω–æ—É—Ç–±—É–∫"  # –¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤

    # –®–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    vk_posts = get_vk_posts(query)
    context.user_data["vk_source"] = vk_posts

    prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏:\n\n"
    prompt += "\n\n".join(vk_posts) + "\n\n–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç, 2-3 —Å—Ç—Ä–æ–∫–∏, –∂–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É."

    # –®–∞–≥ 2 ‚Äî GPT —Å–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100
        )
        post_text = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.")
        return

    # –®–∞–≥ 3 ‚Äî DALL¬∑E –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        dalle = openai.Image.create(
            prompt="futuristic gaming laptop in cyberpunk style, vibrant lighting, 4K",
            n=1,
            size="1024x1024"
        )
        image_url = dalle['data'][0]['url']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    context.user_data["draft"] = {
        "text": post_text,
        "image_url": image_url,
    }

    # –®–∞–≥ 4 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_post")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_post")]
    ])
    await update.message.reply_photo(
        photo=image_url,
        caption=post_text,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    draft = context.user_data.get("draft")

    if not draft:
        await query.edit_message_caption("‚ùå –û—à–∏–±–∫–∞: —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if query.data == "cancel_post":
        await query.edit_message_caption("üö´ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        context.user_data.pop("draft", None)
        return

    if query.data == "confirm_post":
        post_text = draft["text"]
        image_url = draft["image_url"]

        photo_file = download_image(image_url)
        photo_attachment = upload_photo_to_vk(photo_file)

        if not photo_attachment:
            await query.edit_message_caption("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        result = post_to_vk(post_text, photo_attachment)
        if result:
            await query.edit_message_caption("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!")
        else:
            await query.edit_message_caption("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")

        context.user_data.pop("draft", None)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def download_image(url):
    response = requests.get(url)
    file_path = "temp.jpg"
    with open(file_path, "wb") as f:
        f.write(response.content)
    return file_path

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤ –í–ö
def upload_photo_to_vk(image_path):
    upload_url = requests.get(
        "https://api.vk.com/method/photos.getWallUploadServer",
        params={
            "access_token": VK_TOKEN,
            "v": "5.131",
            "group_id": abs(VK_GROUP_ID)
        }
    ).json()["response"]["upload_url"]

    with open(image_path, 'rb') as img:
        files = {'photo': img}
        upload_response = requests.post(upload_url, files=files).json()

    save = requests.get(
        "https://api.vk.com/method/photos.saveWallPhoto",
        params={
            "access_token": VK_TOKEN,
            "v": "5.131",
            "group_id": abs(VK_GROUP_ID),
            "photo": upload_response["photo"],
            "server": upload_response["server"],
            "hash": upload_response["hash"]
        }
    ).json()

    if "response" in save:
        photo = save["response"][0]
        return f'photo{photo["owner_id"]}_{photo["id"]}'
    return None

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –í–ö
def post_to_vk(text, attachment):
    url = "https://api.vk.com/method/wall.post"
    params = {
        "access_token": VK_TOKEN,
        "v": "5.131",
        "owner_id": VK_GROUP_ID,
        "from_group": 1,
        "message": text,
        "attachments": attachment
    }
    response = requests.post(url, params=params).json()
    return "response" in response

# –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –≤ –í–ö
def get_vk_posts(query):
    url = "https://api.vk.com/method/newsfeed.search"
    params = {
        "access_token": VK_TOKEN,
        "v": "5.131",
        "q": query,
        "count": 5
    }
    response = requests.get(url, params=params).json()
    items = response.get("response", {}).get("items", [])
    return [item.get("text", "") for item in items if item.get("text")]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("generate", generate))
application.add_handler(MessageHandler(filters.Regex("^‚úç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç$"), generate))
application.add_handler(CallbackQueryHandler(handle_callback))

# Webhook
@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.post(WEBHOOK_PATH)
async def process_webhook(request: Request):
    try:
        json_data = await request.json()
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"error": str(e)}

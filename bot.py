import os
import logging
import requests
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# –¢–æ–∫–µ–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–≥
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
VK_TOKEN = os.getenv("VK_GROUP_TOKEN")
VK_GROUP_ID = -229574072
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL") + WEBHOOK_PATH

# FastAPI + Telegram
app = FastAPI()
application: Application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –ü–∞–º—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_drafts = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üì§ –ü–æ—Å—Ç –≤ –í–ö", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Etronics üöÄ\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n/help ‚Äî –ø–æ–º–æ—â—å\n/post <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ—Å—Ç –≤ –í–ö\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨áÔ∏è"
    )

# –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /post
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ /post")
        return

    message = ' '.join(context.args)
    await confirm_post(update, context, message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)

    elif text == "üì§ –ü–æ—Å—Ç –≤ –í–ö":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å üëá")
        context.user_data["waiting_for_post"] = True

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_post"):
        context.user_data["waiting_for_post"] = False
        user_drafts[update.effective_user.id] = update.message.text
        await confirm_post(update, context, update.message.text)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
async def confirm_post(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_post"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_post"),
        ]
    ])
    await update.message.reply_text(
        f"–í–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n{message}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –í–ö?",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    message = user_drafts.get(user_id)

    if query.data == "confirm_post":
        if not message:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        logger.info(f"üì¨ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç: {message}")
        url = "https://api.vk.com/method/wall.post"
        params = {
            "access_token": VK_TOKEN,
            "v": "5.131",
            "owner_id": VK_GROUP_ID,
            "from_group": 1,
            "message": message
        }
        response = requests.post(url, params=params).json()

        if "response" in response:
            await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!")
        else:
            error = response.get("error", {}).get("error_msg", "–û—à–∏–±–∫–∞")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error}")

        user_drafts.pop(user_id, None)

    elif query.data == "cancel_post":
        await query.edit_message_text("üö´ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_drafts.pop(user_id, None)

# –•–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("post", post))
application.add_handler(MessageHandler(filters.Regex("^(üì§ –ü–æ—Å—Ç –≤ –í–ö|‚ÑπÔ∏è –ü–æ–º–æ—â—å)$"), handle_buttons))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(CallbackQueryHandler(handle_callback))

# Webhook init
@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# Webhook endpoint
@app.post(WEBHOOK_PATH)
async def process_webhook(request: Request):
    try:
        raw_data = await request.body()
        json_data = await request.json()
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)
        logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return {"ok": True}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"error": str(e)}
